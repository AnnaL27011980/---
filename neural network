import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import StandardScaler
import keras
import keras.models as M
import keras.layers as L
import keras.backend as K
from keras.layers import Dropout
from keras.layers import BatchNormalization
print(keras.__version__)

X_train = np.array(X_train)
y_train = np.array(y_train)

print(type(X_train))  # <class 'numpy.ndarray'>
print(type(y_train))  # <class 'numpy.ndarray'>

X_train=train.drop(['class'],axis=1)
y_train=train['class']
scl = StandardScaler()
X_train = scl.fit_transform(X_train)
X_test = scl.transform(X_test)

model = Sequential()

model.add(Dense(128, activation='relu', input_shape=(X_train.shape[1],)))
model.add(Dropout(0.2))
model.add(BatchNormalization())

model.add(Dense(64, activation='relu'))
model.add(Dropout(0.3))
model.add(BatchNormalization())

model.add(Dense(32, activation='relu'))
model.add(Dropout(0.3))
model.add(BatchNormalization())

model.add(Dense(1, activation='sigmoid'))

# compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(X_train, y_train, batch_size=10, epochs=7, callbacks=[keras.callbacks.TensorBoard("./logs/keras")])
